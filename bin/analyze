#!/bin/bash
#!/bin/bash

function copyright {
cat << EOF


Copyright 2008-2019 Enclave Forensics, Inc / David Hoelzer

As of January 1, 2020, this script is released into the public domain under the following
terms.  You may freely use this script for both personal and commercial purposes, but any
product or service that makes use of this script in whole or in part must bear a clear and
obvious attribution to the copyright owner(s).

You may freely redistribute this script provided that you do not remove this copyright
notice and license.



EOF
}


PACKETPATH=/data/dshieldManager/_packets
sensors=$(ls $PACKETPATH)
bold=$(tput setaf 2)
normal=$(tput sgr0)
START="0"
END="999999999999999"
SOPT=0
EOPT=0
PARAMETERS=""


function usage {
COMMAND=$(basename "$0")
cat << EOF
Usage: $COMMAND [-s | --start-date "MM/DD/YYYY hh:mm:ss"] [-e | --end-date "MM/DD/YYYY hh:mm:ss"] sensor

The analyze tool allows you to easily stream all of the relevant packet captures from a sensor as
a single set of packets, regardless of how many original files are found within the sensor
packet repository.  You must provide the sensor from which to retrieve packets as the final
argument.  All other arguments are optional.

-s | --start-date	Allows you to specify the starting date or time.  If only a date is
			specified, quotation marks are optional and the date will be extended
			to be 00:00:00.
-e | --end-date		Allows you to specify the ending date or time.  If only a date is
			specified, quotation marks are optional and the date will be extended
			to be 00:00:00.
-h | --help		This help.

Provided courtesy David Hoelzer / Enclave Forensics, Inc.
EOF
}
while (("$#")); do
  case "$1" in
    -s|--start-date)
      START=$2
      SOPT=1
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -e|--end-date)
      END=$2
      EOPT=1
      shift 2
      ;;
    -*|--*=)
      echo "Error: Unsupported argument $1" >&2
      exit 3
      ;;
    *)
      PARAMETERS="$PARAMS $1"
      shift
      ;;
  esac
done

if [ $SOPT -gt 0 ] ; then
  START=$(date --date="$START" +"%s")
fi
if [ $EOPT -gt 0 ] ; then
  END=$(date --date="$END" +"%s")
fi

if [ $END -le $START ] ; then
  echo The time window cannot be zero or fewer seconds. >&2
  exit 5
fi

SENSOR=${PARAMETERS/ /}

if [ -z $SENSOR ] ; then
  echo You must supply the name of the sensor that you wish to view packets from!  Valid sensors are [ $bold$sensors $normal] >&2
  exit 1
fi

if [ ! -d $PACKETPATH/$SENSOR ] ; then
  echo $bold$SENSOR$normal is not a valid sensor.  Valid sensors are [ $bold$sensors $normal] >&2
  exit 2
fi

files=$(ls $PACKETPATH/$SENSOR/*.pcap)
toprocess=""
for name in $files; do
  #timestamp=$(echo $name | sed -e "s/^.*pcap\.//")

  # Dustin Decker 06 FEB 2024
  # My packets live in YYYY-MM-DD-HH.pcap format.  This kludge derives the datestamp from the filename
  # then the hour included in the filename, does a quick combine wizardry to add hours, then convert
  # to the anticipated epoch format.
  date=$(thisfile=$(echo $name | rev | cut -c8-18 | rev); date -d "$thisfile")
  hour=$(thisfile=$(echo $name | rev | cut -c6-7 | rev); date -d "$thisfile" +"%H")
  combinedTime=$(date --date="$date +$hour hour")
  timestamp=$(date -d "$combinedTime" +"%s")

  if [ $timestamp -ge $START ] && [ $timestamp -le $END ] ; then
    toprocess="$toprocess $name"
  fi
done
if [ -z "$toprocess" ] ; then
  echo No packets from $SENSOR are in that time range! >&2
  exit 4
fi
mergecap -w - $toprocess
