# FUNCTIONS
displayBanner() {
    clear
    head -n 1 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 2 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 3 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 4 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 5 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 6 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 7 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 8 $dshieldDirectory/bin/banner.txt; sleep .5
    echo
}

userDateSelection() {
#date="$(dialog --stdout --date-format %Y-%m-%d --calendar "Select a Date.  Limited to one day." 0 0 15 02 2024)"
date="$(zenity --width=800 --height=600 --calendar --date-format %Y-%m-%d --title="Select a Date" \
    --text="Select a Date" --day=15 --month=2 --year=2024)"
echo
echo $date

# Validate date input restricts to years 2022-2024, and "calendar valid" MM and DD
if [[ $date =~ ^[2][0][2][2-5]{1}-[0-1]{1}[0-2]{1}-[0-3]{1}[0-9]{1}$ ]]
  then echo .
        echo "Date format is valid, fetching data for $date"
  else echo .
        echo "Invalid format (not YYYY-MM-DD or not in allowed range.)"
        date=
        read -n 1 -s -r -p "Press any key to continue"
        clear
fi
}

honeypot2SQL() {
    /usr/bin/clear
    while [ -z $date ]
    do
        userDateSelection
    done
    clear
    userDate=$date
    rm $dbDir/webhoneypot.db3
    sqlite3 $dbDir/webhoneypot.db3 "CREATE TABLE "webHoneyPot"("time" TEXT,"headers" TEXT,"sip" TEXT,"dip" TEXT,"method" TEXT,"url" TEXT,"data" TEST,"useragent" TEXT,"version" TEXT,"response_id" TEXT,"signature_id" TEXT,sensorName TEXT)"
    for sensor in "${probes[@]}"
    do
      # Use the specific date from user for .json.
      for X in $dshieldDirectory/_liveData/$sensor.$domain/logs/webhoneypot-$userDate.json
        do
            echo sensor: $sensor
            echo "Pulling $X log into Sqlite database --- "           
            # Correctly we split the function into two commands.  Overwrite temp file each pass for sensor
            (head -1 $X | jq -r 'keys_unsorted | @csv') | head -1 > $dbDir/webhoneypottemp.csv 
            # export each record to csv
            jq -r 'map(tostring) | @csv' < $X >> $dbDir/webhoneypottemp.csv
            # Let's make a Master table
            sqlite3 $dbDir/webhoneypot.db3 ".import --csv $dbDir/webhoneypottemp.csv webHoneyPot" > /dev/null 2>&1
            sqlite3 $dbDir/webhoneypot.db3 "UPDATE webHoneyPot SET sensorName='$sensor' WHERE sensorName IS NULL"  > /dev/null 2>&1
        done
    done
    sqlite3 $dbDir/webhoneypot.db3 "DELETE FROM webHoneyPot WHERE time ='time'"  > /dev/null 2>&1
    sqlite3 $dbDir/webhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN response_id" > /dev/null 2>&1
    sqlite3 $dbDir/webhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN signature_id" > /dev/null 2>&1
    sqlite3 $dbDir/webhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN data" > /dev/null 2>&1
    date=
    userDate=
    clear
}

allhoneypots2SQL() {
    rm $dbDir/everywebhoneypot.db3
    # Let's make a table
    echo "This will take quite a while.  The database file will be _HUGE_."
    echo "Countless CPU cycles will be consumed..."
    echo
    echo "It will hurt the entire time."
    echo
    echo "Press CTRL+C to exit to shell without the pain."
    echo
    read -n 1 -s -r -p "Press any key to continue..."
    sqlite3 $dbDir/everywebhoneypot.db3 "CREATE TABLE "webHoneyPot"("time" TEXT,"headers" TEXT,"sip" TEXT,"dip" TEXT,"method" TEXT,"url" TEXT,"data" TEST,"useragent" TEXT,"version" TEXT,"response_id" TEXT,"signature_id" TEXT,sensorName TEXT)"
    for sensor in "${probes[@]}"
    do
      for X in $dshieldDirectory/_liveData/$sensor.nullusspecialis.com/logs/webhoneypot-*.json
        do
            echo sensor: $sensor
            echo "Pulling $X log into Sqlite database --- "           
            # Correctly we split the function into two commands.  Overwrite temp file each pass for sensor
            (head -1 $X | jq -r 'keys_unsorted | @csv') | head -1 > $dbDir/everywebhoneypottemp.csv
            # export each record to csv
            jq -r 'map(tostring) | @csv' < $X >> $dbDir/everywebhoneypottemp.csv
            # Let's make a table
            sqlite3 $dbDir/everywebhoneypot.db3 ".import --csv $dbDir/everywebhoneypottemp.csv webHoneyPot" > /dev/null 2>&1
            #sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot ADD COLUMN sensorName TEXT" > /dev/null 2>&1
            sqlite3 $dbDir/everywebhoneypot.db3 "UPDATE webHoneyPot SET sensorName='$sensor' WHERE sensorName IS NULL" > /dev/null 2>&1
        done
    done
    sqlite3 $dbDir/everywebhoneypot.db3 "DELETE FROM webHoneyPot WHERE time ='time'"  > /dev/null 2>&1
    sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN response_id" > /dev/null 2>&1
    sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN signature_id" > /dev/null 2>&1
    sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN data" > /dev/null 2>&1
    read -n 1 -s -r -p "Press any key to continue"
}

firewall2SQL() {
    rm $dbDir/localDshield.log $dbDir/firewall.db3
    sqlite3 $dbDir/firewall.db3 "CREATE TABLE "firewallTable"("time" TEXT,"flags" TEXT,"sip" TEXT,"dip" TEXT,"proto" TEXT,"sport" TEXT,"dport" TEXT, sensorName TEXT)"
    for sensor in "${probes[@]}"
	do
        cp $dshieldDirectory/logs/$sensor/localDshield.log $dbDir/.
        sed -i '/^#/d' $dbDir/localDshield.log
        cat $dbDir/localDshield.log | jq -r '.logs | map([.time, .flags, .sip, .dip, .proto, .sport, .dport] | join(", ")) | join("\n")' > $dbDir/firewallTemp.csv
        sqlite3 $dbDir/firewall.db3 ".import --csv $dbDir/firewallTemp.csv firewallTable" > /dev/null 2>&1
        sqlite3 $dbDir/firewall.db3 "UPDATE firewallTable SET sensorName='$sensor' WHERE sensorName IS NULL" > /dev/null 2>&1
    done
    sqlite3 $dbDir/firewall.db3 "UPDATE firewallTable SET time = datetime(time, 'unixepoch', 'localtime')"
}

everyfirewall2SQL() {
    rm $dbDir/everylocalDshield.log $dbDir/everyfirewall.db3
    sqlite3 $dbDir/everyfirewall.db3 "CREATE TABLE "firewallTable"("time" TEXT,"flags" TEXT,"sip" TEXT,"dip" TEXT,"proto" TEXT,"sport" TEXT,"dport" TEXT, sensorName TEXT)"
    for sensor in "${probes[@]}"
	do
        #cp $dshieldDirectory/logs/$sensor/localDshield.log $dbDir/.
        cat $dshieldDirectory/logs/$sensor/localDshield.log* > $dbDir/everylocalDshield.log
        sed -i '/^#/d' $dbDir/everylocalDshield.log
        cat $dbDir/everylocalDshield.log | jq -r '.logs | map([.time, .flags, .sip, .dip, .proto, .sport, .dport] | join(", ")) | join("\n")' > $dbDir/everyfirewallTemp.csv
        sqlite3 $dbDir/everyfirewall.db3 ".import --csv $dbDir/everyfirewallTemp.csv firewallTable" > /dev/null 2>&1
        sqlite3 $dbDir/everyfirewall.db3 "UPDATE firewallTable SET sensorName='$sensor' WHERE sensorName IS NULL" > /dev/null 2>&1
    done
    sqlite3 $dbDir/everyfirewall.db3 "UPDATE firewallTable SET time = datetime(time, 'unixepoch', 'localtime')"
}

sensorStatus() {
    /usr/bin/clear
    echo "Current Status of DShield Sensors --- " ${probes[@]}
    for sensor in "${probes[@]}"
    do
    echo sensor: $sensor
    /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo /srv/dshield/status.sh' | \
    sed -n -e '/### Are My Reports Received/ { n; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N;h; }' -e '$ { g; /./p; }'
    echo
    read -n 1 -s -r -p "Press any key to continue"
    /usr/bin/clear
    done
}

extractPackets() {
    /usr/bin/clear
    echo "--- Extracting DShield Packet Captures --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
	    echo "Extracting and Archiving Packet tarballs for" $sensor
        for tarBall in $dshieldDirectory/_incoming/$sensor.$domain/packets/*.gz;
            do 
               cp $tarBall /data/productionArchive/dshield/$sensor.$domain/packets/ ; 
			   tar zxfv $tarBall -C /data/dshieldManager/_packets/$sensor.$domain/ ; 
			   rm $tarBall
            done
	done
    /usr/bin/clear
}

carvePackets() {
items=("africa24" "australia24" "eastasia24" "eastus24" "europe24" "india24" "israel24" \
"korea24" "southamerica24" "southeastasia24" "westus24" "test" "Return to Main Menu")

while item=$(zenity --title="Select Sensor" --text="Select Sensor" --list  --width=400 --height=400 \
	--column="Options" "${items[@]}")
	do
		case "$item" in
			"${items[0]}") sensor=africa24 ;;
			"${items[1]}") sensor=australia24 ;;
			"${items[2]}") sensor=eastasia24 ;;
			"${items[3]}") sensor=eastus24 ;;
			"${items[4]}") sensor=europe24 ;;
			"${items[5]}") sensor=india24 ;;
			"${items[6]}") sensor=israel24 ;;
			"${items[7]}") sensor=korea24 ;;
			"${items[8]}") sensor=southamerica24 ;;
			"${items[9]}") sensor=southeastasia24 ;;
			"${items[10]}") sensor=westus24 ;;
			"${items[11]}") sensor=westus24 ;;
            "${items[12]}") mainMenu ;;
		esac

	
	# gather start date, start time, end date and end time to pass to analyze packet gatherer.
	sDate="$(zenity --width=800 --height=600 --calendar --date-format %m/%d/%Y --title="Select Start Date" \
    --text="Select Start Date" --day=15 --month=2 --year=2024)"

	sTime="$(zenity --forms --title="Enter Start Time" --text="Enter Start Time" --separator=":" --add-entry="Hour" --add-entry="Minutes" --add-entry="Seconds")"

	eDate="$(zenity --width=800 --height=600 --calendar --date-format %m/%d/%Y --title="Select End Date" \
    --text="Select End Date" --day=15 --month=2 --year=2024)"

	eTime="$(zenity --forms --title="Enter End Time" --text="Enter End Time" --separator=":" --add-entry="Hour" --add-entry="Minutes" --add-entry="Seconds")"

    clear
    echo
    echo
    echo "You selected sensor $sensor"
    echo "Start=$sDate:$sTime"
    echo "End=$eDate:$eTime"
    echo
    read -n 1 -s -r -p "Press any key to continue"
    echo
    echo "Exporting any packets found to $dshieldDirectory/investigation/pcap/$sensor-export.pcap"
    echo

    $dshieldDirectory/bin/analyze $sensor.$domain -s "$sDate $sTime" -e "$eDate $eTime" \
         | tcpdump -n -r - -w $dshieldDirectory/investigation/pcap/$sensor-export.pcap
    read -n 1 -s -r -p "Press any key to continue and launch Wireshark.  CTRL+C to Exit."
    clear

    wireshark $dshieldDirectory/investigation/pcap/$sensor-export.pcap &
    done 
    #ssh $onionUser@$onionServer "rm -f /var/incoming/*.pcap"
    #scp $dshieldDirectory/_packets/$sensor.nullusspecialis.com/$filename $onionUser@$onionServer:/var/incoming/.
    #ssh $onionUser@$onionServer "sudo so-import-pcap /var/incoming/*.pcap"
}

remoteCommand() {
    /usr/bin/clear
    printf "\n\n\n\n\n\n\n\n"
    # Prompt the user for command
    echo "Enter simple commnand.  Remember, you're executing as the dshield user."
    echo
    echo "You need to prepend your command with sudo for most administrative functions."
    echo
    echo "W A R N I N G !  W A R N I N G !  W A R N I N G !"
    echo "I'm doing ZERO input validation here.  BE WARNED!"
    echo
    read -p "Enter your command: " remoteCommand
    echo
    echo $remoteCommand
    for sensor in "${probes[@]}"
	do
    echo "Executing on $sensor"
    echo
    /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort $remoteCommand
    echo
    done
}

viewTTY () {
    /usr/bin/clear
    sensors=("africa24" "australia24" "eastasia24" "eastus" "europe24" "india24" "israel24" "korea24" "southamerica24" "southeastasia24" "westus24")
    # Launch dialog to select sensor
    sensor=$(dialog --stdout --title "Select Sensor" --radiolist "Select a sensor:" 0 0 0 \
        $(for ((i=0; i<${#sensors[@]}; i++)); do
            echo "$((i+1)) ${sensors[$i]}" off
        done))

    case $sensor in
        1)
            sensor=africa24
            ;;
        2)
            sensor=australia24
            ;;
        3)
            sensor=eastasia24
            ;;
        4)
            sensor=eastus24
            ;;
        5)
            sensor=europe24
            ;;
        6)
            sensor=india24
            ;;
        7)
            sensor=israel24
            ;;
        8)
            sensor=korea24
            ;;
        9)
            sensor=southamerica24
            ;;
        10)
            sensor=southeastasia24
            ;;
        11)
            sensor=westus24
            ;;
        *)
            ;;
    esac
    file=$(dialog --stdout --inputbox "Enter the filename" 15 30 '')
    clear
    echo "Begin Replay ---"
    playlog -bc /data/dshieldManager/_liveData/$sensor.$domain/tty/$file
    echo "End Replay ---"
    read -n 1 -s -r -p "Press any key to continue"
}

extractDownloads () {
    /usr/bin/clear
     printf "\n\n\n\n\n\n\n\n"
    echo "		extractDownloads not implemented yet"
    read -n 1 -s -r -p "Press any key to continue"
}

graphHoneypotLogs () {
    for sensor in "${probes[@]}"
	do
	echo $sensor
        $dshieldDirectory/bin/fileSizeDistribution.py $dshieldDirectory/_liveData/$sensor.$domain/logs/ ;
        clear
	done
}

graphPcapLogs () {
    for sensor in "${probes[@]}"
	do
        echo $sensor
		$dshieldDirectory/bin/fileSizeDistribution.py $dshieldDirectory/_packets/$sensor.$domain ;
        clear
	done
}

graphPacketTarballs () {
    for sensor in "${probes[@]}"
	do
	echo $sensor
	$dshieldDirectory/bin/fileSizeDistribution.py /data/productionArchive/dshield/previouslyAnalyzedPackets/$sensor
    done
}

graphDownloads () {
    for sensor in "${probes[@]}"
	do
        echo $sensor
		$dshieldDirectory/bin/fileSizeDistribution.py $dshieldDirectory/_liveData/$sensor.$domain/downloads/ ;
        clear
    done
}

graphTTY () {
    for sensor in "${probes[@]}"
	do
        echo $sensor
		$dshieldDirectory/bin/fileSizeDistribution.py $dshieldDirectory/_liveData/$sensor.$domain/tty/ ;
        clear
	done
}

detectLargeFiles () {
	$dshieldDirectory/bin/fileSizeDistributionSubs.py $dshieldDirectory/_liveData/ ;
}

tenMostUnique () {
    for sensor in "${probes[@]}"
	do
	echo $sensor
    $dshieldDirectory/bin/mostUnique10Files.py $dshieldDirectory/_liveData/$sensor.$domain/tty
    done
    read -n 1 -s -r -p "Press any key to continue"
}
